#!/usr/bin/env bash

set -euxo pipefail

export PATH="/builder/image.d:$PATH"

rootfs_work="$(mktemp -d)"
mount -t tmpfs tmpfs "$rootfs_work"

MYROOT="$(mktemp -d)"
mount -t tmpfs tmpfs "$MYROOT"
mkdir -p "$MYROOT"/sysroot
mkdir -p "$MYROOT"/sysroot/ostree/deploy
mkdir -p "$MYROOT"/sysroot/ostree/deploy/gardenlinux/var
OSTREE_SYSROOT="$MYROOT/sysroot"
OSTREE_REPO=$OSTREE_SYSROOT/ostree/repo
OSTREE_REF="gardenlinux/today/$BUILDER_ARCH"

# REPO_CNAME=$(echo $BUILDER_CNAME | sed 's/Image/Repo/g')
# FIXME proper name building

REPO_CNAME=kvm-ostreeRepo_curl_dev-${BUILDER_ARCH}-today
REMOTE_NAME="$REPO_CNAME".ostreeRepo
REMOTE_ARCHIVE_NAME="$REMOTE_NAME.tar.gz"
REMOTE_URL="http://ostree.gardenlinux.io"

rootfs="$1"
output="$2"

tar xf "$rootfs" -C "$rootfs_work"


mkdir -p $OSTREE_REPO
mkdir -p $OSTREE_SYSROOT
download="$(mktemp -d)"
pushd $download
curl --remote-name $REMOTE_URL/$REMOTE_ARCHIVE_NAME
tar xf $REMOTE_ARCHIVE_NAME --directory $OSTREE_REPO
ls -l $OSTREE_REPO
popd
rm -rf $download
ostree admin deploy --karg=root=LABEL=ROOT --karg-append=rw --karg-append=efi=runtime --sysroot=$OSTREE_SYSROOT --os=gardenlinux $OSTREE_REF

boot_hash=`ls "$OSTREE_SYSROOT"/ostree/boot.1.1/gardenlinux/`
mkdir -p "$OSTREE_SYSROOT"/ostree/boot.1.1/gardenlinux/$boot_hash/0/sysroot

mkdir -p "$OSTREE_SYSROOT"/ostree/deploy/gardenlinux/var/home
mkdir -p "$OSTREE_SYSROOT"/ostree/deploy/gardenlinux/var/roothome
mkdir -p "$OSTREE_SYSROOT"/ostree/deploy/gardenlinux/var/opt
mkdir -p "$OSTREE_SYSROOT"/ostree/deploy/gardenlinux/var/srv

# Build disk image, this is hacky as of now, needs rework
# Setup bootloader
boot_dir=$(mktemp -d)
cp -r $OSTREE_SYSROOT/boot/* $boot_dir
LOADER_TEMP=$(mktemp -d)
echo BOOT_DIR: $boot_dir
ls -la $boot_dir
rm -rf $boot_dir/loader
# move to temp dir to avoid errors with systemd-boot install
mv $boot_dir/loader.1 $LOADER_TEMP
mkdir -p $rootfs_work/boot/efi
mount --bind $boot_dir $rootfs_work/boot/efi
mount --rbind /proc $rootfs_work/proc
mount --rbind /sys $rootfs_work/sys
ls -l $rootfs_work/usr/bin
SYSTEMD_ESP_PATH=/boot/efi chroot $rootfs_work /usr/bin/bootctl --no-variables install
umount -l $rootfs_work/proc
umount -l $rootfs_work/sys
umount $rootfs_work/boot/efi
# recover from temp dir
cp -r $LOADER_TEMP/* $boot_dir/loader.1
cp -r $LOADER_TEMP/* $boot_dir/loader
cp $boot_dir/loader/loader.1/entries/* $boot_dir/loader/entries
cat $boot_dir/loader/entries/*
echo 'timeout 7' > $boot_dir/loader/loader.conf

efi_partition=$(mktemp)
root_partition=$(mktemp)
partitions=$(mktemp)

# fixme: make disk size dynamic
truncate -s 900M "$efi_partition"
# make_reproducible_vfat $OSTREE_SYSROOT/boot "$efi_partition"
make_reproducible_vfat -t 11111111 $boot_dir "$efi_partition"
size_uefi=$(du -b "$efi_partition" | awk '{ padded_size = $1 + (MB - ($1 % MB) % MB); print (padded_size / MB) }' "MB=1048576")
part_uuid_uefi=b0e0359c-007b-4361-a0d1-a7ca2d73fe3c
echo -e "$part_uuid_uefi\tuefi\t$size_uefi\t0\t$efi_partition\tEFI" >> "$partitions"

truncate -s 3G "$root_partition"
make_reproducible_ext4 -t 11111111 -l ROOT "$MYROOT"/sysroot "$root_partition"
size_rootfs=$(du -b "$root_partition" | awk '{ padded_size = $1 + (MB - ($1 % MB) % MB); print (padded_size / MB) }' "MB=1048576")
part_uuid_rootfs=a9bef950-8218-4888-9f1c-1ad8bb481807
echo -e "$part_uuid_rootfs\tlinux\t$size_rootfs\t0\t$root_partition\tROOT" >> "$partitions"

makedisk $rootfs_work "$output" < "$partitions"
